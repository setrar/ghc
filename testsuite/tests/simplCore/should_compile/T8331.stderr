
==================== Tidy Core rules ====================
"SPEC $c*> @(ST s) _"
    forall (@s) (@r) ($dApplicative :: Applicative (ST s)).
      $fApplicativeReaderT_$c*> @(ST s) @r $dApplicative
      = ($fApplicativeReaderT3 @s @r)
        `cast` (forall (a :: <*>_N) (b :: <*>_N).
                <ReaderT r (ST s) a>_R
                %<'Many>_N ->_R <ReaderT r (ST s) b>_R
                %<'Many>_N ->_R <r>_R %<'Many>_N ->_R Sym (N:ST[0] <s>_N <b>_R)
                                ; Sym (N:ReaderT[0] <*>_N <r>_R <ST s>_R <b>_N)
                :: Coercible
                     (forall {a} {b}.
                      ReaderT r (ST s) a -> ReaderT r (ST s) b -> r -> STRep s b)
                     (forall {a} {b}.
                      ReaderT r (ST s) a -> ReaderT r (ST s) b -> ReaderT r (ST s) b))
"SPEC $c>> @(ST s) _"
    forall (@s) (@r) ($dMonad :: Monad (ST s)).
      $fMonadReaderT1 @(ST s) @r $dMonad
      = $fMonadAbstractIOSTReaderT_$s$c>> @s @r
"SPEC $cliftA2 @(ST s) _"
    forall (@s) (@r) ($dApplicative :: Applicative (ST s)).
      $fApplicativeReaderT_$cliftA2 @(ST s) @r $dApplicative
      = ($fApplicativeReaderT1 @s @r)
        `cast` (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                <a -> b -> c>_R
                %<'Many>_N ->_R <ReaderT r (ST s) a>_R
                %<'Many>_N ->_R <ReaderT r (ST s) b>_R
                %<'Many>_N ->_R <r>_R %<'Many>_N ->_R Sym (N:ST[0] <s>_N <c>_R)
                                ; Sym (N:ReaderT[0] <*>_N <r>_R <ST s>_R <c>_N)
                :: Coercible
                     (forall {a} {b} {c}.
                      (a -> b -> c)
                      -> ReaderT r (ST s) a -> ReaderT r (ST s) b -> r -> STRep s c)
                     (forall {a} {b} {c}.
                      (a -> b -> c)
                      -> ReaderT r (ST s) a -> ReaderT r (ST s) b -> ReaderT r (ST s) c))
"SPEC $cp1Applicative @(ST s) _"
    forall (@s) (@r) ($dApplicative :: Applicative (ST s)).
      $fApplicativeReaderT_$cp1Applicative @(ST s) @r $dApplicative
      = $fApplicativeReaderT_$s$fFunctorReaderT @s @r
"SPEC $cp1Monad @(ST s) _"
    forall (@s) (@r) ($dMonad :: Monad (ST s)).
      $fMonadReaderT_$cp1Monad @(ST s) @r $dMonad
      = $fApplicativeReaderT_$s$fApplicativeReaderT @s @r
"SPEC $fApplicativeReaderT @(ST s) _"
    forall (@s) (@r) ($dApplicative :: Applicative (ST s)).
      $fApplicativeReaderT @(ST s) @r $dApplicative
      = $fApplicativeReaderT_$s$fApplicativeReaderT @s @r
"SPEC $fFunctorReaderT @(ST s) _"
    forall (@s) (@r) ($dFunctor :: Functor (ST s)).
      $fFunctorReaderT @(ST s) @r $dFunctor
      = $fApplicativeReaderT_$s$fFunctorReaderT @s @r
"SPEC $fMonadReaderT @(ST s) _"
    forall (@s) (@r) ($dMonad :: Monad (ST s)).
      $fMonadReaderT @(ST s) @r $dMonad
      = $fMonadAbstractIOSTReaderT_$s$fMonadReaderT @s @r
"SPEC useAbstractMonad"
    forall (@s)
           ($dMonadAbstractIOST :: MonadAbstractIOST (ReaderT Int (ST s))).
      useAbstractMonad @(ReaderT Int (ST s)) $dMonadAbstractIOST
      = (useAbstractMonad1 @s)
        `cast` (<Int>_R
                %<'Many>_N ->_R <Int>_R %<'Many>_N ->_R Sym (N:ST[0] <s>_N <Int>_R)
                                ; Sym (N:ReaderT[0] <*>_N <Int>_R <ST s>_R <Int>_N)
                :: Coercible
                     (Int -> Int -> STRep s Int) (Int -> ReaderT Int (ST s) Int))


